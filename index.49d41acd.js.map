{"mappings":"AAAO,MAAMA,EAAO,CAClBC,OAAQC,SAASC,cAAc,cAC/BC,WAAYF,SAASC,cAAc,eCF9B,SAASE,EAAiBC,GAC/B,MAAO,iFAC0CA,EAAKC,kCAC5CD,EAAKE,2BACNF,EAAKG,uB,CCChB,SAASC,I,IACAC,EAAP,OAAgD,QAAzCA,EAAAC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAS,IAAzCJ,IAA6C,E,CAE/C,MAAMK,EAAkB,C,IAR/B,SAAaV,GACX,MAAMW,EAAQP,IACdO,EAAMC,KAAKZ,GACXQ,aAAaK,QAAQ,QAASP,KAAKQ,UAAUH,G,SAKTP,GCN/B,IAkBIW,EAAS,CAACC,EAAO,MAC1B,IAAIf,EAAK,GACLgB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAClD,KAAOA,KACLf,GCvBF,mEDuBwC,GAAdgB,EAAMD,IAEhC,OAAOf,CAAE,EExBJ,SAASoB,EAAWC,GACzB,MAAMtB,EAAO,CAAEC,GAAIc,KAOnB,MANiB,IAAI,IAAIQ,SAASD,EAAME,gBAE/BC,QAAO,CAACC,GAAMC,EAAKC,MACrBA,GAAOC,MAAM,oBAClB7B,EAAK2B,GAAOC,CAAK,GAChB,IACI5B,C,CCGTN,EAAKC,OAAOmC,iBAAiB,UCRtB,SAAuBR,GAC5BA,EAAMS,iBACN,MAAM/B,EAAOqB,EAAWC,GACxBZ,EAAgBsB,IAAIhC,GACpB,MAAMiC,EAASlC,EAAiBC,GAChCN,EAAKI,WAAWoC,mBAAmB,aAAcD,E,ICN5C,WACL,MACMA,EADQvB,EAAgByB,SACTC,IAAIrC,GAAkBsC,KAAK,IAChD3C,EAAKI,WAAWoC,mBAAmB,aAAcD,E,CFQnD","sources":["src/js/refs.js","src/js/createTaskMarkup.js","src/js/localStorageAPI.js","node_modules/nanoid/index.browser.js","node_modules/nanoid/url-alphabet/index.js","src/js/createTask.js","src/index.js","src/js/submitHandler.js","src/js/renderTasks.js"],"sourcesContent":["export const refs = {\n  formEl: document.querySelector('#task-form'),\n  taskListEl: document.querySelector('#task-list'),\n};\n","export function createTaskMarkup(task) {\n  return `<li class=\"task-list-item\">\n     <button class=\"task-list-item-btn\" data-id=\"${task.id}\">Delete</button>\n      <h3>${task.taskName}</h3>\n      <p>${task.taskText}</p>\n  </li>`;\n}\n","function add(task) {\n  const tasks = getAll();\n  tasks.push(task);\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}\nfunction getAll() {\n  return JSON.parse(localStorage.getItem('tasks')) ?? [];\n}\nexport const localStorageAPI = { add, getAll };\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\n\nexport function createTask(event) {\n  const task = { id: nanoid() };\n  const formData = [...new FormData(event.currentTarget)];\n\n  formData.reduce((acc, [key, value]) => {\n    if (!value) alert('Enter all inputs');\n    task[key] = value;\n  }, '');\n  return task;\n}\n","/**\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Delete</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n */\n\nimport { refs } from './js/refs';\nimport { renderTasks } from './js/renderTasks';\nimport { submitHandler } from './js/submitHandler';\n\nrefs.formEl.addEventListener('submit', submitHandler);\n\nrenderTasks();\n","import { createTask } from './createTask';\nimport { localStorageAPI } from './localStorageAPI';\nimport { refs } from './refs';\nimport { createTaskMarkup } from './createTaskMarkup';\n\nexport function submitHandler(event) {\n  event.preventDefault();\n  const task = createTask(event);\n  localStorageAPI.add(task);\n  const markup = createTaskMarkup(task);\n  refs.taskListEl.insertAdjacentHTML('afterbegin', markup);\n}\n","import { createTaskMarkup } from './createTaskMarkup';\nimport { localStorageAPI } from './localStorageAPI';\nimport { refs } from './refs';\n\nexport function renderTasks() {\n  const tasks = localStorageAPI.getAll();\n  const markup = tasks.map(createTaskMarkup).join('');\n  refs.taskListEl.insertAdjacentHTML('afterbegin', markup);\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","formEl","document","querySelector","taskListEl","$454981b0f76e497b$export$5abcd3dce68fbf9a","task","id","taskName","taskText","$f1e93b4660a948dd$var$getAll","ref","JSON","parse","localStorage","getItem","$f1e93b4660a948dd$export$4a683aab0e79cfdc","tasks","push","setItem","stringify","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","bytes","crypto","getRandomValues","Uint8Array","$0b289c241a71d611$export$f7292ab7796be73c","event","FormData","currentTarget","reduce","acc","key","value","alert","addEventListener","preventDefault","add","markup","insertAdjacentHTML","getAll","map","join"],"version":3,"file":"index.49d41acd.js.map"}